#-*- mode: org -*-
#+AUTHOR:    Dan Meliza
#+EMAIL:     dan@meliza.org
#+DATE: [2013-02-08 Fri]
#+TEXT: Version 2.0.0
#+LANGUAGE:   en
#+OPTIONS: ^:nil H:2
#+STYLE:    <link rel="stylesheet" href="org.css" type="text/css" />

=arfx= is a commandline tool for moving data in and out of ARF containers, using
a tar-like syntax to specify input and output files. ARF
(https://github.com/dmeliza/arf) is an open, portable file format for storing
behavioral and neural data, based on [[http://www.hdfgroup.org/HDF5][HDF5]].

** requirements

+ Python >= 2.6
+ arf >= 2.0 (https://github.com/dmeliza/arf)
+ toelis >= 1.0 (https://github.com/dmeliza/toelis)
+ ewave >= 1.0.2 (https://github.com/dmeliza/ewave)

** installation

: python setup.py install

** usage

The general syntax is =arfx operation [options] files=. Operations are as
follows:

+ -A :: copy data from one container to another
+ -c :: create a new container
+ -r :: append data to the container
+ -t :: list contents of the container
+ -x :: extract entries from the container
+ -d :: delete entries from the container

Options specify the target ARF file, verbosity, automatic naming schemes, and
any metadata to be stored in the entry.

+ -f FILE :: use ARF file FILE
+ -v :: verbose output
+ -n NAME :: name entries sequentially, using NAME as the base
+ -a ANIMAL :: specify the animal
+ -e EXPERIMENTER :: specify the experimenter
+ -p PROTOCOL :: specify the protocol
+ -s HZ :: specify the sampling rate of the data, in Hz
+ -T DATATYPE :: specify the type of data
+ -u :: do not compress data in the arf file
+ -P :: when deleting entries, do not repack

*** input files

=arfx= can read sampled data from =wave= files and =pcmseq2= files (a legacy file
format), and event data from =toelis= and =lbl= files.  Additional file formats
can be added as plugins (see [[extending arfx]]).

When adding data to an ARF container (=-c= and =-r= modes), the input files are
specified on the command line, and added in the order given. By default, entries
are given the same name as the input file, minus the extension; however, if the
input file has more than one entry, they are given an additional numerical
extension. To override this, the =-n= flag can be used to specify the base name;
all entries are given sequential names based on this.

Input files can be grouped by surrounded them with brackets, e.g. =arfx -cf
test.arf [file1.wav file2.wav]=. Grouped files are treated as separate channels
that should be grouped in the same entries. For file types that contain more
than one entry, the entries of the grouped files are iterated in step. If the
number of entries in the grouped files doesn't match the tool will use the data
available and issue a warning. If the name of the entries is not specified using
the =-n= flag, the entries are named after the first file in the group. The
channels are named using a simple sequential scheme ('pcm_000', etc).

The =-n, -a, -e, -p, -s, -T= options are used to store information about the
data being added to the file. The DATATYPE argument can be the numerical code or
enumeration code (run =arfx --help-datatypes= for a list), and indicates the
type of data in the entries. All of the entries created in a single run of arfx
are given these values. The =-u= option tells arfx not to compress the data,
which can speed up I/O operations slightly.

*** output files

The entries to be extracted (in =-x= mode) can be specified by name. If no names
are specified, all the entries are extracted. The output files will have names
with the format =entry_channel.ext=, where =ext= is the extension corresponding
to the data type. arfx outputs sampled data in =wave= format, simple event data
in =toelis= format, and tabular event data in comma-delimited tables (CSV).

The =-n= argument can be used to customize the names of the output files. The
argument must be a template in the format defined by the [[http://docs.python.org/library/string.html#format-specification-mini-language][python string module]].
Supported field names include ``entry'', ``channel'', or ``index'', or they can
be the name of an HDF5 attribute stored on the entry or channel.

Support for extracting specific channels will be added in the future.

The metadata options are ignored when extracting files; any metadata present in
the ARF container that is also supported by the target container is copied.

*** other operations

As with =tar=, the =-t= operation will list the contents of the
archive. Each entry/channel is listed on a separate line in path notation.

The =-A= flag is used to copy the contents of one ARF file to another. The
entries are copied without modification from the source ARF file(s) to the
target container. Entry IDs are preserved, but grouping information is lost.

The =-d= (delete) operation uses the same syntax as the extract operation, but
instead of extracting the entries, they are deleted. Because of limitations in
the underlying HDF5 library, this does not free up the space, so the file is
repacked unless the =-P= option is set.

** extending arfx

Additional formats for reading and writing can be added using the Python
distribute package's plugin system (see http://pythonhosted.org/distribute/).
Plugins must be registered in the =arfx.io= entry point group, with a name
corresponding to the extension of the file format handled by the plugin.

An arfx IO plugin is a class with the following required methods:

+ __init__(path, mode, **attributes) :: opens the file at =path=. The =mode=
     argument specifies whether the file is opened for reading (=r=), writing
     (=w=), or appending (=a=). Must throw an =IOError= if the file does not
     exist or cannot be created, and a =ValueError= if the specified value for
     =mode= is not supported. The additional =attributes= arguments specify
     metadata to be stored in the file when created. When appropriate, =arfx=
     will attempt to set =sampling_rate=, =units=, and =datatype= values in
     files opened for writing.  This method may issue a =ValueError= if the
     caller fails to set a required attribute, or attempts to set an attribute
     inconsistent with the data format.
+ read() :: must read the contents of the opened file and return the data in a
            format suitable for storage in an ARF file. Specifically, it must
            be an acceptable type for the =arf.entry.add_data()= method (see
            https://github.com/dmeliza/arf for documentation).
+ write(data) :: must write data to the file. Must issue an =IOError= if the
                 file is opened in the wrong mode, and =TypeError= if the data
                 format is not correct for the file format.
+ timestamp :: must be a readable property giving the time point of the data.
               The value may be a scalar indicating the number of seconds since
               the epoch, or a two-element sequence giving the number of
               seconds and microseconds since the epoch.  If this property is
               writable it will be set by =arfx= when writing data.

The class may also define the following methods and properties. If any property
is not defined, it is assumed to have the default value defined below.

+ nentries :: a readable property indicating the number of entries in the file.
              Default value is 1.
+ entry :: a readable and writable property corresponding to the currently
           active entry in the file.  Active means that the =read()= and
           =write()= methods will affect only that entry.  Default is 0, and
           =arfx= will not attempt to change the property if =nentries= is 1.
+ nchannels :: a readable property indicating the number of channels in the
               current entry. Default value is 1.
+ channel :: a readable and writable property corresponding to the currently
             active channel. Default is 0, and =arfx= will not attempt to change
             the property if =nentries= is 0.
+ sampling_rate :: a property indicating the sampling rate of the
                   data. If this property is absent, the data are assumed to be
                   event times. If the property is writable, =arfx= will set
                   its value to that of the data it's writing.
+ units :: a property indicating the units of the measurements, if
           applicable. If this property is absent for sampled data, it is
           ignored. If it is absent for event times, it is assumed to be =ms=
           (milliseconds). If the property is writable, =arfx= will set
                   its value to that of the data it's writing.
+ datatype :: a property whose value is an integer code defining the type of
              data in the file (or current entry). See =arf.DataTypes= or the
              ARF specification for defined values. Default is
              =arf.DataTypes.UNDEFINED=. If the property is writable, =arfx=
              will set its value to that of the data it's writing.

** project status

=arfx= is currently in pre-release alpha. It will be finalized when the
specification for ARF version 2.0 is frozen.
